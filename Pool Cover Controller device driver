// link your particle account here
preferences {
    input name: "deviceId", type: "text", title: "Device ID", required: true
    input name: "token", type: "password", title: "Access Token", required: true
    input name: "changeVar", type: "text", title: "Cover Function Name", required: true, defaultValue: "covercloud"
    }
// expose custom attributes and commands
metadata {
	definition (name: "Pool Cover Controller", namespace: "brennonsapps", author: "bscuderi") {
		capability "Actuator"
		capability "Sensor"
        capability "Refresh"

        command "opencover"
        command "closecover"
        command "stopcover"
        attribute "CoverPosition", "string"
	}
}

// define commands
def opencover() {
    cchange("open")
    push(1)
    getCoverState()
    //refresh()
}

def closecover() {
	cchange("close")
    push(2)
    getCoverState()
    //refresh()
}

def stopcover() {
	cchange(stop)
    push(3)
    //refresh()
}

private push(button) {
	log.debug "$device.displayName button $button was pushed"
	sendEvent(name: "button", value: "pushed", data: [buttonNumber: button], descriptionText: "$device.displayName button $button was pushed", isStateChange: true)
}

def refresh() {
    getCoverState()   
}
// only run at first boot
def installed() {
	initialize()
}

// only run at first boot
def updated() {
	initialize()
}

// only run at first boot
def initialize() {
	sendEvent(name: "numberOfButtons", value: 3)
    state.CoverPosition = unknown    
    log.debug "device.CoverPosition: ${device.CoverPosition}"
}

// Send a button push to photon
private cchange(button) {
	httpPost(
		uri: "https://api.particle.io/v1/devices/${deviceId}/${changeVar}",
        body: [access_token: token, command: button],  
	) {response -> log.debug (response.data)}
}

// Recieve a Response From Photon to verify the command was recieved and track the cover position
private getCoverState() {
    // handle and store the data of the return
    def closure = { response ->
        log.debug "Valve request was successful, $response.data"
        sendEvent(name: "cover", value: response.data.result)
        //  change the switch state if a power setting over 0 is set
        if (response.data.result == 1){
        sendEvent(name: "CoverPosition", value: "open")
       }
        if (response.data.result == 0){
        sendEvent(name: "CoverPosition", value: "closed")
        }
        if (response.data.result == 2){
        sendEvent(name: "CoverPosition", value: "unknown")
        }
    }

    httpGet("https://api.particle.io/v1/devices/${deviceId}/CoverState?access_token=${token}", closure)   // what actually gets sent and returned from Particle
}
